{"version":3,"sources":["app/assets/images/star.svg","app/assets/images/wars.svg","app/components/Logo/Logo.js","app/Home/Home.js","app/components/Card/Card.js","app/components/Row/Row.js","app/components/Button/Button.js","app/components/Loading/Loading.js","app/Game/Game.js","app/Credits/Credits.js","app/Routes.js","app/components/Footer/Footer.js","app/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Logo","props","react_default","a","createElement","className","src","imageStar","alt","imageWars","class","id","Home","react_router_dom","to","Component","Card","title","children","Row","name","value","Button","onClick","Loading","status","initialState","loading","planet","population","climate","films","Game","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","objectSpread","newPlanet","bind","assertThisInitialized","terrain","diameter","gravity","surface_water","length","getPlanet","setState","clearState","_this2","axios","get","baseUrl","then","res","planetsPerPage","data","results","randomPlanetPosition","Math","floor","random","count","positionAtPage","ceil","randomPlanetPage","console","log","Credits","target","rel","href","Routes","react_router","exact","path","component","from","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","app_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a2d7a089.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/star.ec263c0f.svg\";","module.exports = __webpack_public_path__ + \"static/media/wars.7a4f0f41.svg\";","import React from 'react'\r\nimport './logo.scss'\r\nimport imageStar from '../../assets/images/star.svg'\r\nimport imageWars from '../../assets/images/wars.svg'\r\n\r\n\r\nexport default props => {\r\n\r\n   // animationByline();\r\nreturn (\r\n    <div className=\"starwars-logo\">\r\n     <img src={imageStar} alt=\"Star\" className=\"star\" />\r\n     <img src={imageWars} alt=\"Wars\" className=\"wars\" />\r\n     <h2 class=\"byline\" id=\"byline\"><span>T</span><span>h</span><span>e</span> <span>G</span><span>a</span><span>m</span><span>e</span></h2>\r\n  </div>)\r\n\r\n}\r\n","import React, { Component }  from 'react'\r\nimport Logo from '../components/Logo/Logo'\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n          <Logo />\r\n          <div className=\"container--align-center vertical-bottom\">\r\n              <Link className=\"button\" to=\"/Game\">\r\n                  Start the game\r\n              </Link>\r\n\r\n              <Link className=\"button\" to=\"/Credits\">\r\n                  Credits\r\n              </Link>\r\n          </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Home;","import React from 'react'\r\nimport './card.scss'\r\n\r\nexport default props => {\r\n  return (\r\n    <div className=\"card\">\r\n      <h2 className=\"card__title\">{props.title}</h2>\r\n      {props.children}\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\n\r\nexport default props =>\r\n<p className=\"card__row\">\r\n    <span>{props.name}:</span> <span>{props.value}</span>\r\n</p>","import React from 'react'\r\n\r\nexport default props =>\r\n<button className=\"button\" onClick={props.onClick}>\r\n    {props.name}\r\n</button>\r\n","import React from 'react'\r\nimport './loading.scss'\r\n\r\nexport default props => {\r\n  if (props.status)\r\n    return (<div className=\"loading\"></div>)\r\n  else\r\n    return false\r\n}\r\n\r\n","import React, { Component }  from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport Card from '../components/Card/Card'\r\nimport Row from '../components/Row/Row'\r\nimport Button from '../components/Button/Button'\r\nimport Loading from '../components/Loading/Loading'\r\nimport axios from 'axios'\r\n\r\nconst category = 'planets'\r\n\r\nconst initialState = {\r\n  loading: true,\r\n  planet : {\r\n    population: '',\r\n    climate: '',\r\n    films: []\r\n  }\r\n}\r\nconst baseUrl = 'https://swapi.co/api/'\r\n\r\nclass Game extends Component {\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.newPlanet = this.newPlanet.bind(this)\r\n  }\r\n  \r\n  state = { ...initialState}\r\n  render() {\r\n    \r\n    if (this.state.loading){\r\n    return (\r\n    <div className=\"container--align-center vertical-center\">\r\n      <Loading status={this.state.loading} />\r\n    </div>)\r\n    } else {\r\n    return(\r\n      <div className=\"container--align-center vertical-center\">\r\n        <Loading status={this.state.loading} />\r\n        <Card title={this.state.planet.name}>\r\n          <Row name=\"Populatin\" value={this.state.planet.population} className=\"card__row\" />\r\n          <Row name=\"Climate\" value={this.state.planet.climate} className=\"card__row\" />\r\n          <Row name=\"Terrain\" value={this.state.planet.terrain} className=\"card__row\" />\r\n          <Row name=\"Diameter\" value={this.state.planet.diameter} className=\"card__row\" />\r\n          <Row name=\"Gravity\" value={this.state.planet.gravity} className=\"card__row\" />\r\n          <Row name=\"Surface Water\" value={this.state.planet.surface_water} className=\"card__row\" />\r\n         \r\n          <div className=\"card__footer\">Featured in {this.state.planet.films.length} films </div>\r\n  \r\n        </Card>\r\n        <Button name=\"NEW RANDOM PLANET\" onClick={this.newPlanet} />\r\n        <Link className=\"button\" to=\"/\">BACK TO HOME</Link>\r\n      </div>\r\n      )\r\n    }\r\n  }\r\n\r\n    componentDidMount(){\r\n      this.getPlanet()\r\n    }\r\n\r\n    clearState(){\r\n      this.setState({ ...initialState})\r\n    }\r\n\r\n    newPlanet(){\r\n      this.clearState()\r\n      this.getPlanet()\r\n    }\r\n\r\n    getPlanet(){\r\n      axios.get(baseUrl + category + \"/?page=\" + 1)\r\n      .then(res => {\r\n        let planetsPerPage = res.data.results.length\r\n        let randomPlanetPosition = Math.floor((Math.random() * res.data.count) + 1)\r\n        let randomIndex = randomPlanetPosition - 1\r\n        let positionAtPage = randomIndex - ((Math.ceil(randomPlanetPosition / planetsPerPage) - 1) * planetsPerPage)\r\n        let randomPlanetPage = Math.ceil(randomPlanetPosition / planetsPerPage)\r\n\r\n        axios.get(baseUrl + category + \"/?page=\" + randomPlanetPage)\r\n        .then(res => {\r\n          this.setState({loading: false, planet: res.data.results[positionAtPage]})\r\n          console.log(this.state)\r\n        })\r\n      })\r\n    }\r\n}\r\n\r\nexport default Game;","import React, { Component }  from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass Credits extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container--align-center vertical-center\">\r\n        <h1 className=\"title\">THANKS FOR WATCHING</h1>   \r\n          <a className=\"button\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://igorfernando.com\">\r\n            @iigorfernando\r\n          </a>\r\n        <Link className=\"button\" to=\"/\">\r\n          BACK TO HOME\r\n        </Link>            \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Credits;","import React from 'react'\r\nimport {Switch, Route, Redirect } from 'react-router'\r\n\r\n\r\nimport Home from './Home/Home'\r\nimport Game from './Game/Game'\r\nimport Credits from './Credits/Credits'\r\n\r\n\r\nexport default props =>\r\n    <Switch>\r\n        <Route exact path='/' component={Home} />\r\n        <Route path='/Game' component={Game} />\r\n        <Route path='/Credits' component={Credits} />\r\n        <Redirect from='*' to='/' />\r\n    </Switch>","import React from 'react'\r\nimport  './footer.scss'\r\n\r\nexport default props =>\r\n<footer className=\"footer\">\r\n  <small className=\"footer__small\">Igor Fernando © 2019 - Todos os Direitos Reservados -  May the force be with you!  --  We are all made of bits. Challenge B2W</small>\r\n</footer>\r\n","import React, { Component } from 'react'\r\nimport { HashRouter } from 'react-router-dom'\r\nimport Routes from './Routes'\r\n\r\nimport './scss/Main.scss';\r\nimport Footer from './components/Footer/Footer'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <HashRouter>\r\n        <div className=\"App\">\r\n          <div className=\"App-header\">\r\n         \r\n            <div className=\"star star--small\"></div>\r\n            <div className=\"star star--medium\"></div>\r\n            <div className=\"star star--large\"></div>\r\n\r\n            <Routes />\r\n            <Footer />\r\n          </div>\r\n        </div>\r\n      </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}